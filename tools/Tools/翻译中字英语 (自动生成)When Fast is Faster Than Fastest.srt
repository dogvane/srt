1
00:00:00,030 --> 00:00:03,360
所以我是Dano Clifford， 我领导的团队 

2
00:00:03,360 --> 00:00:06,899
在德国的Google慕尼黑工作 

3
00:00:06,899 --> 00:00:09,360
 v8这是一个JavaScript引擎你

4
00:00:09,360 --> 00:00:11,190
可能听说过这个 用法 

5
00:00:11,190 --> 00:00:14,130
 谷歌浏览器和nodejs，所以我会 

6
00:00:14,130 --> 00:00:15,540
请求一点点观众 

7
00:00:15,540 --> 00:00:17,369
 实际参加这里的人 

8
00:00:17,369 --> 00:00:20,060
在客户端写入JavaScript 

9
00:00:20,060 --> 00:00:21,810
 这很好 

10
00:00:21,810 --> 00:00:25,320
 服务器端 哇谁好 

11
00:00:25,320 --> 00:00:28,920
其实听说这 8个都没错 

12
00:00:28,920 --> 00:00:32,219
在我之前，这很好

13
00:00:32,219 --> 00:00:33,480
进入我的谈话 的 实际哑巴 

14
00:00:33,480 --> 00:00:36,420
喜欢为排序设置框架 

15
00:00:36,420 --> 00:00:37,920
讨论和我想要的主题

16
00:00:37,920 --> 00:00:40,739
 今天与你分享， 这是一个 

17
00:00:40,739 --> 00:00:44,190
一点点mccoshen艾里的 故事，所以我 

18
00:00:44,190 --> 00:00:46,260
 几乎所有人都在这个行业 

19
00:00:46,260 --> 00:00:48,840
超过25年 ，我见过 很多 

20
00:00:48,840 --> 00:00:51,000
 梦想成真，而不是所有这些 

21
00:00:51,000 --> 00:00:53,610
梦想已经完成 了你的方式 

22
00:00:53,610 --> 00:00:56,250
 预期，所以 我想要 的报价 

23
00:00:56,250 --> 00:00:58,289
 与大家分享一下就是了 

24
00:00:58,289 --> 00:01:00,719
 当心 你 在 你 想要什么 的 

25
00:01:00,719 --> 00:01:03,199
因为你可能会在你的中年 

26
00:01:03,199 --> 00:01:06,689
所以这个报价实际上是归因于 

27
00:01:06,689 --> 00:01:11,460
一个比较有名的有时是抒情诗人 

28
00:01:11,460 --> 00:01:14,250
哲学家兼政治家约翰 

29
00:01:14,250 --> 00:01:17,790
 沃尔夫冈 ·冯· 歌德，这是一种 

30
00:01:17,790 --> 00:01:20,520
归因于一点点的来源

31
00:01:20,520 --> 00:01:22,110
更常见的短语 ，你可能 有 

32
00:01:22,110 --> 00:01:23,460
也听说过这 是 小心 

33
00:01:23,460 --> 00:01:24,900
 你在生活中希望什么，因为它 

34
00:01:24,900 --> 00:01:27,900
可能会成真，我给出的理由 

35
00:01:27,900 --> 00:01:29,490
事实证明，现在情况是这样的

36
00:01:29,490 --> 00:01:32,250
那显然不太知名

37
00:01:32,250 --> 00:01:34,320
 哲学家并不是非常有才华 的人 

38
00:01:34,320 --> 00:01:37,140
作家竟然出现了报价 ，这 是非常 

39
00:01:37,140 --> 00:01:40,439
作为软件适用于我们的空间

40
00:01:40,439 --> 00:01:42,450
开发人员和各种产品和 

41
00:01:42,450 --> 00:01:44,850
 复杂系统的开发人员

42
00:01:44,850 --> 00:01:45,829
 像这样 

43
00:01:45,829 --> 00:01:48,689
 要小心 你的优化， 因为它 

44
00:01:48,689 --> 00:01:52,409
可能会更快，没有别的 等等 

45
00:01:52,409 --> 00:01:55,619
 记住 这 一点作为排序框架 

46
00:01:55,619 --> 00:01:57,060
 讨论我想要的 

47
00:01:57,060 --> 00:02:01,790
 今天你与我想 

48
00:02:01,790 --> 00:02:04,189
告诉你我的概述 

49
00:02:04,189 --> 00:02:06,730
这是一个概述

50
00:02:06,730 --> 00:02:10,480
 我喜欢从这开始，它很有趣 

51
00:02:10,480 --> 00:02:12,850
我想谈谈我想 开始 出 

52
00:02:12,850 --> 00:02:14,770
用我发出的声音 

53
00:02:14,770 --> 00:02:16,420
 真正的官方称为合成 

54
00:02:16,420 --> 00:02:19,330
基准困境这是基准如何 

55
00:02:19,330 --> 00:02:22,270
 可以变坏我想跟你说一个 

56
00:02:22,270 --> 00:02:24,490
 关于V8如何工作以及如何工作的一点点 

57
00:02:24,490 --> 00:02:25,930
 这在过去几年中已经发生了变化 

58
00:02:25,930 --> 00:02:27,880
 特别是因为它给了一个 

59
00:02:27,880 --> 00:02:30,910
框架如何我们的教训

60
00:02:30,910 --> 00:02:32,830
 在过去 几年和我学会了

61
00:02:32,830 --> 00:02:34,360
 认为这里有实际的教训 

62
00:02:34,360 --> 00:02:36,790
 适用于 任何 开发 

63
00:02:36,790 --> 00:02:39,730
大型软件系统的教训 

64
00:02:39,730 --> 00:02:41,470
当然了解了一个重要的部分 

65
00:02:41,470 --> 00:02:44,410
这一点，我喜欢那种 专注于 

66
00:02:44,410 --> 00:02:47,290
这个东西叫自我托管vs 

67
00:02:47,290 --> 00:02:51,280
 优化的内置插件 ， 我会进入 

68
00:02:51,280 --> 00:02:52,600
 那是什么，所以不要担心 在 

69
00:02:52,600 --> 00:02:55,360
这一点 和最后一件事情喜欢做 

70
00:02:55,360 --> 00:02:57,730
告诉你我们曾经做过什么 

71
00:02:57,730 --> 00:02:59,590
想通了，我们的教训 

72
00:02:59,590 --> 00:03:01,450
学到了很重要我们做了一些事

73
00:03:01,450 --> 00:03:03,580
 关于它 ，这是 所谓的部分 

74
00:03:03,580 --> 00:03:06,010
 构建 内置 的构建器 和 代码 

75
00:03:06,010 --> 00:03:10,270
 停止汇编，让我们进入它 

76
00:03:10,270 --> 00:03:14,170
我想要的综合基准困境

77
00:03:14,170 --> 00:03:18,780
 沿着这条 记忆道走一点 

78
00:03:18,780 --> 00:03:21,310
 vietze 存在了，而 现在 ，当 

79
00:03:21,310 --> 00:03:22,660
它首次出现时，铬是第一次 

80
00:03:22,660 --> 00:03:24,580
发布了使用的基准

81
00:03:24,580 --> 00:03:26,980
 以 测试JavaScript速度均会有什么新 

82
00:03:26,980 --> 00:03:28,540
现在回想起来叫微

83
00:03:28,540 --> 00:03:31,660
基准如此SunSpider kracken 他们 

84
00:03:31,660 --> 00:03:33,730
 在当时是有用的，因为他们 

85
00:03:33,730 --> 00:03:36,010
测试了某些关键功能 

86
00:03:36,010 --> 00:03:37,780
 JavaScript运行时非常重要

87
00:03:37,780 --> 00:03:39,520
小型应用程序已经 运行 

88
00:03:39,520 --> 00:03:44,280
 随着应用程序变得越来越大， 

89
00:03:44,280 --> 00:03:47,230
 V8 是负责 这 部分 是 

90
00:03:47,230 --> 00:03:49,390
应用程序变得更加可能

91
00:03:49,390 --> 00:03:52,120
需要复杂的厚度类型

92
00:03:52,120 --> 00:03:54,910
 在基准测试也成为 

93
00:03:54,910 --> 00:03:58,480
 在2012年 左右 或2012年 左右更大 

94
00:03:58,480 --> 00:04:01,209
发布了一个称为辛烷和基准的基准

95
00:04:01,209 --> 00:04:04,930
它试图代表更广泛的范围 

96
00:04:04,930 --> 00:04:09,250
 我们可以 使用用例用例 

97
00:04:09,250 --> 00:04:10,660
优化，以便我们做一个 

98
00:04:10,660 --> 00:04:12,760
 为 实际优化 提供 更好的工作 

99
00:04:12,760 --> 00:04:14,950
 我们找到的应用程序和 

100
00:04:14,950 --> 00:04:19,410
 事实证明，在野外发现 

101
00:04:19,410 --> 00:04:23,610
我们有一个相当得到它的权利V8引擎 做 

102
00:04:23,610 --> 00:04:25,020
 优化的一个很好的工作 

103
00:04:25,020 --> 00:04:27,480
 我们有SunSpider的基准

104
00:04:27,480 --> 00:04:30,240
 克拉肯辛烷但我们很重要 

105
00:04:30,240 --> 00:04:32,010
 意识到那些基准没有 

106
00:04:32,010 --> 00:04:33,540
真正反映了在这个过程 中发生了 什么 

107
00:04:33,540 --> 00:04:36,300
 狂野，所以我们创建了一个 内部 

108
00:04:36,300 --> 00:04:39,450
基准在哪里常见的网站 和我们 

109
00:04:39,450 --> 00:04:41,250
 通过 我们的一些自动化来运行它们

110
00:04:41,250 --> 00:04:43,290
 我们测量了他们的位置 

111
00:04:43,290 --> 00:04:45,300
他们花时间在那里 

112
00:04:45,300 --> 00:04:46,620
一些有趣的结果 出来了 

113
00:04:46,620 --> 00:04:48,980
 这所以这看起来非常复杂 

114
00:04:48,980 --> 00:04:51,120
 你不需要了解所有的东西 

115
00:04:51,120 --> 00:04:52,230
 细节在这里， 但我想指出 

116
00:04:52,230 --> 00:04:53,850
 在 左边 是列表 

117
00:04:53,850 --> 00:04:55,980
 可能 是 一堆网站的一部分 

118
00:04:55,980 --> 00:04:57,540
很难从后面读取 

119
00:04:57,540 --> 00:04:59,220
排， 但其中一些可能看起来 

120
00:04:59,220 --> 00:05:03,290
 熟悉你和每个这些酒吧 

121
00:05:03,290 --> 00:05:06,090
 旁边 的网站是一个分布的 

122
00:05:06,090 --> 00:05:10,290
时间是什么时候铬实际上在做什么 

123
00:05:10,290 --> 00:05:13,350
您正在加载该网站 和我们 

124
00:05:13,350 --> 00:05:14,460
创建这些测试，以便 我们可以运行 

125
00:05:14,460 --> 00:05:16,230
他们一次又一次地能够做到 

126
00:05:16,230 --> 00:05:18,480
优化并查看这些配置文件 

127
00:05:18,480 --> 00:05:20,400
 会改变 这里 要注意的事情 

128
00:05:20,400 --> 00:05:22,080
在底部有一个传说和 

129
00:05:22,080 --> 00:05:23,700
你会看到 ，我们所花费 的时间 

130
00:05:23,700 --> 00:05:26,580
 网站上的是真有种 跨越 

131
00:05:26,580 --> 00:05:27,930
 我们花了一些时间 在 董事会 

132
00:05:27,930 --> 00:05:29,940
 JavaScript，但我们也花 时间 

133
00:05:29,940 --> 00:05:32,490
 在Dom中闪烁的回调

134
00:05:32,490 --> 00:05:34,530
 例如我们也花时间解析 

135
00:05:34,530 --> 00:05:36,090
 我会回到那个，否则我会证明这一点 

136
00:05:36,090 --> 00:05:39,180
 哪里适合以后，并且有一个 

137
00:05:39,180 --> 00:05:40,620
 我们正在做的其他各种事情 

138
00:05:40,620 --> 00:05:43,050
 当我们 现在 载入 网站 

139
00:05:43,050 --> 00:05:44,820
 这里有趣的 是 你 看到 

140
00:05:44,820 --> 00:05:47,700
 每一个网站是一点点 

141
00:05:47,700 --> 00:05:50,580
不同但你确实看到了一些模式 

142
00:05:50,580 --> 00:05:52,290
 在这里或 至少有一种模式 

143
00:05:52,290 --> 00:05:54,510
 这对 我们和那 非常有趣 

144
00:05:54,510 --> 00:05:57,260
 右边是粉红色的酒吧 

145
00:05:57,260 --> 00:06:01,530
相对较小，全部为 25％或 更少 

146
00:06:01,530 --> 00:06:04,860
 我们测试过的网站和那个 

147
00:06:04,860 --> 00:06:06,780
令人惊讶， 因为这是 

148
00:06:06,780 --> 00:06:08,910
 JavaScript片断，这是花费的时间 

149
00:06:08,910 --> 00:06:11,430
 实际执行JavaScript，为什么 

150
00:06:11,430 --> 00:06:12,210
这很有趣

151
00:06:12,210 --> 00:06:15,330
好吧，如果你看看八分辛烷值 

152
00:06:15,330 --> 00:06:17,130
基准我们出来， 并与英寸 

153
00:06:17,130 --> 00:06:18,030
 2012 

154
00:06:18,030 --> 00:06:20,640
看看辛烷花在哪里的时间 

155
00:06:20,640 --> 00:06:23,820
 几乎全是粉红色或 三分之二 

156
00:06:23,820 --> 00:06:26,040
 四分之三 粉红色这意味着我们 

157
00:06:26,040 --> 00:06:28,350
 多年来一直在优化

158
00:06:28,350 --> 00:06:30,540
 实际上并不代表 什么是 

159
00:06:30,540 --> 00:06:32,460
赫然出现 在网页 

160
00:06:32,460 --> 00:06:35,010
 好了，这是我们需要 解决 的东西 

161
00:06:35,010 --> 00:06:37,290
 并 在过去的 几年里我们已经 

162
00:06:37,290 --> 00:06:39,630
一直在努力 解决这个问题 

163
00:06:39,630 --> 00:06:41,520
我们已经做到这一点的方法是尝试 寻找更多 

164
00:06:41,520 --> 00:06:44,250
在真实的网站和服务器端 

165
00:06:44,250 --> 00:06:46,530
 在真实的nodejs表现 

166
00:06:46,530 --> 00:06:49,020
 应用程序， 以便 我们可以调优v8 

167
00:06:49,020 --> 00:06:50,670
 我们的工作负载类型

168
00:06:50,670 --> 00:06:52,200
通常在野外看到，而不仅仅是 

169
00:06:52,200 --> 00:06:54,920
我们在基准测试中看到的那些

170
00:06:54,920 --> 00:06:57,420
幸运的是有几个 

171
00:06:57,420 --> 00:07:00,300
基准现在更多 

172
00:07:00,300 --> 00:07:02,460
代表这些工作负载的 那 

173
00:07:02,460 --> 00:07:03,900
我们希望为您所看到的 进行优化 

174
00:07:03,900 --> 00:07:05,580
在真实世界的网站上 

175
00:07:05,580 --> 00:07:10,500
速度计，它模拟MVC 做的事情 

176
00:07:10,500 --> 00:07:14,730
应用程序，与一堆标准 

177
00:07:14,730 --> 00:07:16,470
 JavaScript框架，我们可以测试 

178
00:07:16,470 --> 00:07:19,800
并看看 铬和V8需要 多 长时间 

179
00:07:19,800 --> 00:07:22,020
 这些半真实的各个部分

180
00:07:22,020 --> 00:07:24,360
应用程序，也有六个 

181
00:07:24,360 --> 00:07:28,710
这是测试 最新 的基准 

182
00:07:28,710 --> 00:07:30,300
 ACMA脚本功能等es6功能 

183
00:07:30,300 --> 00:07:32,040
 你会在最近几次看到 

184
00:07:32,040 --> 00:07:33,990
 几年来，我们 用v8 获得了更快的速度 

185
00:07:33,990 --> 00:07:35,850
在这些非常好的工作负载中 

186
00:07:35,850 --> 00:07:38,190
 因为这个消息直接转化为 

187
00:07:38,190 --> 00:07:39,750
 你会表现的类型 

188
00:07:39,750 --> 00:07:41,400
希望在你的和你的网站上看到 

189
00:07:41,400 --> 00:07:46,320
 在 nodejs 的服务器端 真的 

190
00:07:46,320 --> 00:07:48,030
 所有这一切的重要教训是 

191
00:07:48,030 --> 00:07:50,850
我们意识到如果你 

192
00:07:50,850 --> 00:07:53,400
 有 用于 优化的基准

193
00:07:53,400 --> 00:07:56,310
一些特定的或表明一个 

194
00:07:56,310 --> 00:07:57,930
具体的问题，你会结束 

195
00:07:57,930 --> 00:08:00,450
优化这个问题，那可以 

196
00:08:00,450 --> 00:08:02,150
 成为一个陷阱的一点点，因为 

197
00:08:02,150 --> 00:08:04,770
优化乐趣， 我们喜欢这样做 

198
00:08:04,770 --> 00:08:07,440
 v8团队但是如果你有错误的话 

199
00:08:07,440 --> 00:08:09,540
 目标，你将继续努力实现 

200
00:08:09,540 --> 00:08:12,480
目标， 除非你知道你什么时候完成 

201
00:08:12,480 --> 00:08:15,270
而且你可能冒着忽视的风险 

202
00:08:15,270 --> 00:08:17,790
 具体过程中的其他事情 

203
00:08:17,790 --> 00:08:20,040
我们意识到什么，并且你看到 了 

204
00:08:20,040 --> 00:08:22,080
那些图是之前的 

205
00:08:22,080 --> 00:08:25,140
大多数应用程序的性能概要

206
00:08:25,140 --> 00:08:27,570
有一种方式是 全面的 

207
00:08:27,570 --> 00:08:29,070
有时间花在JavaScript解析上 

208
00:08:29,070 --> 00:08:31,740
 大教堂很多不同的地方 ，如果 

209
00:08:31,740 --> 00:08:33,600
你只是特别优化 

210
00:08:33,600 --> 00:08:35,910
其中一个切片， 那么你就不会冒险 

211
00:08:35,910 --> 00:08:38,400
 拥有 一贯 的平台 

212
00:08:38,400 --> 00:08:40,230
高性能， 所以有这个概念 

213
00:08:40,230 --> 00:08:42,690
始终如一的基线 

214
00:08:42,690 --> 00:08:44,100
 这是一种 咒语 

215
00:08:44,100 --> 00:08:45,360
 我们已经在过去的几个月里 

216
00:08:45,360 --> 00:08:45,779
 年份 

217
00:08:45,779 --> 00:08:47,879
确保不仅仅是具体使用 

218
00:08:47,879 --> 00:08:50,189
案例很快，但 JavaScript和 

219
00:08:50,189 --> 00:08:52,769
 web平台和 nodejs速度很快 

220
00:08:52,769 --> 00:08:58,589
 全面 的 感觉没问题，呼吸 

221
00:08:58,589 --> 00:09:02,220
 所以考虑到这一点，我想谈一谈 

222
00:09:02,220 --> 00:09:04,709
 关于 V8如何工作以及如何工作的一 点点 

223
00:09:04,709 --> 00:09:06,120
我们在过去的几个月里改变了它 

224
00:09:06,120 --> 00:09:08,910
 这个新的 重点 放在 铁路上 

225
00:09:08,910 --> 00:09:13,259
 性能两项技术我想 

226
00:09:13,259 --> 00:09:15,889
突出讨论这个问题

227
00:09:15,889 --> 00:09:19,529
 点火和涡轮风扇我们花了 

228
00:09:19,529 --> 00:09:20,870
最近几年的建设 

229
00:09:20,870 --> 00:09:23,009
基础新技术进入v8 

230
00:09:23,009 --> 00:09:27,269
这使它在现实世界中变得更快 

231
00:09:27,269 --> 00:09:31,439
并涵盖更广泛的 使用范围 

232
00:09:31,439 --> 00:09:33,209
 第一个案例是点火 

233
00:09:33,209 --> 00:09:35,490
翻译点火解释器

234
00:09:35,490 --> 00:09:37,410
 为我们提供了基准性能 

235
00:09:37,410 --> 00:09:38,759
 我们需要一致的基线性能

236
00:09:38,759 --> 00:09:40,470
 如果我们正在运行各种不同的 

237
00:09:40,470 --> 00:09:43,980
 JavaScript 我们有涡轮风扇 

238
00:09:43,980 --> 00:09:46,740
 优化编译器哪个需要一个 

239
00:09:46,740 --> 00:09:49,199
看最常见还是最多 

240
00:09:49,199 --> 00:09:50,879
经常执行的代码和 

241
00:09:50,879 --> 00:09:53,670
然后选择性地优化这些

242
00:09:53,670 --> 00:09:55,680
 这两个新组件我们能够做到 

243
00:09:55,680 --> 00:09:58,949
处理更广泛的用 例 

244
00:09:58,949 --> 00:10:00,240
比我们以前做的 

245
00:10:00,240 --> 00:10:02,370
我不会详述所有的细节 

246
00:10:02,370 --> 00:10:05,790
 我们 以前在v8中做过的事情，但截至目前 

247
00:10:05,790 --> 00:10:07,709
铬59 所以这差不多 一年 

248
00:10:07,709 --> 00:10:08,040
现在

249
00:10:08,040 --> 00:10:09,990
这两种技术是主要的 

250
00:10:09,990 --> 00:10:13,350
 v8中的 这些让 我们可以解决 这个问题 

251
00:10:13,350 --> 00:10:15,959
性能需求的广泛 使用 

252
00:10:15,959 --> 00:10:22,259
案件好吧，让我们来谈谈一点点 

253
00:10:22,259 --> 00:10:25,350
 v8如何使用这两种技术 

254
00:10:25,350 --> 00:10:27,870
 点火和涡轮风扇和集成 

255
00:10:27,870 --> 00:10:29,730
他们进入它的管道 这是一个有用的 

256
00:10:29,730 --> 00:10:32,910
模型也回想那个 

257
00:10:32,910 --> 00:10:34,709
一套图表，我显示了哪里 

258
00:10:34,709 --> 00:10:36,750
 在不同的酒吧 x 的 分布 

259
00:10:36,750 --> 00:10:39,240
 这将会告诉 你那些地方 

260
00:10:39,240 --> 00:10:41,339
来自或其中一些来自 如此 

261
00:10:41,339 --> 00:10:42,600
 v8如何运作，我们会采取你的 

262
00:10:42,600 --> 00:10:44,550
 JavaScript 代码，它 通过一个 

263
00:10:44,550 --> 00:10:46,769
解析器和解析器将它变成一个 

264
00:10:46,769 --> 00:10:49,350
抽象语法树这 是 如此 

265
00:10:49,350 --> 00:10:52,829
标准的计算机科学的 东西和 

266
00:10:52,829 --> 00:10:55,709
那么抽象树语法树就会得到 

267
00:10:55,709 --> 00:10:58,290
变成了解释器字节码 

268
00:10:58,290 --> 00:10:59,760
解释器字节码

269
00:10:59,760 --> 00:11:01,620
 我通过点火运行

270
00:11:01,620 --> 00:11:04,470
在上一张 幻灯片中提到， 就像我们一样 

271
00:11:04,470 --> 00:11:05,400
 通过该 代码运行该代码 

272
00:11:05,400 --> 00:11:07,950
解释器我们不只是执行 

273
00:11:07,950 --> 00:11:10,050
我们正在寻找从信号

274
00:11:10,050 --> 00:11:12,060
执行我们稍后可以使用的代码

275
00:11:12,060 --> 00:11:14,580
 优化 Java脚本的一种 

276
00:11:14,580 --> 00:11:16,980
棘手的语言， 它非常类型 

277
00:11:16,980 --> 00:11:18,690
它是狂野的西部耶，你可以创造一个 

278
00:11:18,690 --> 00:11:20,640
一次变量，下一个是整数

279
00:11:20,640 --> 00:11:21,960
当下一次它是一个字符串时 

280
00:11:21,960 --> 00:11:25,260
对象， 并没有真正的信号 

281
00:11:25,260 --> 00:11:28,440
 预先v8 什么你想要什么你的 

282
00:11:28,440 --> 00:11:29,970
意图是或有几个信号 

283
00:11:29,970 --> 00:11:31,020
 我会真的 进入 一点 

284
00:11:31,020 --> 00:11:33,330
 没有那些明确的类型更是如此 

285
00:11:33,330 --> 00:11:35,810
 你会用其他语言找到它 

286
00:11:35,810 --> 00:11:37,860
 V8拥有真正 了解一点点 

287
00:11:37,860 --> 00:11:39,270
 关于你之前的代码 

288
00:11:39,270 --> 00:11:40,920
 连接之前它可以让你发胖 

289
00:11:40,920 --> 00:11:44,310
 让它更快，所以解释者是什么 

290
00:11:44,310 --> 00:11:46,080
它是否运行你的字节码 

291
00:11:46,080 --> 00:11:46,470
 而 

292
00:11:46,470 --> 00:11:49,830
收集我们称之为这种类型的反馈

293
00:11:49,830 --> 00:11:53,130
反馈，然后是反馈 

294
00:11:53,130 --> 00:11:55,680
发送最热门的 JavaScript代码 

295
00:11:55,680 --> 00:11:59,490
码到涡扇编译器在哪里你 

296
00:11:59,490 --> 00:12:01,380
 JavaScript 被选择性地优化 

297
00:12:01,380 --> 00:12:02,940
变成运行的机器代码 

298
00:12:02,940 --> 00:12:08,400
真的很快，所以几个高层 

299
00:12:08,400 --> 00:12:10,110
关于这个新系统和观察的观察

300
00:12:10,110 --> 00:12:11,670
为什么它实际上比 我们的 更好 

301
00:12:11,670 --> 00:12:14,730
 之前 我会回到 这个 

302
00:12:14,730 --> 00:12:16,560
 实际上 这看起来很复杂 

303
00:12:16,560 --> 00:12:18,150
很简单，你注意到有 

304
00:12:18,150 --> 00:12:20,430
箭在这里我们去从一个阶段到 

305
00:12:20,430 --> 00:12:22,740
 接下来有 几个例外 

306
00:12:22,740 --> 00:12:24,450
 我不会进入这里 ，但 这个 想法是 

307
00:12:24,450 --> 00:12:26,460
 我们 可以 推测 这个系统 

308
00:12:26,460 --> 00:12:28,740
 因为这些单位是 独立的 

309
00:12:28,740 --> 00:12:30,090
 它们之间的接口是 

310
00:12:30,090 --> 00:12:34,290
相对明确的定义它不是 

311
00:12:34,290 --> 00:12:35,880
情况并非 总是 如此 

312
00:12:35,880 --> 00:12:38,370
 v8，它非常干净而且那样 

313
00:12:38,370 --> 00:12:41,520
帮助我们有一些重要的 问 

314
00:12:41,520 --> 00:12:44,460
 对于某些重要的属性来说 

315
00:12:44,460 --> 00:12:47,460
 首先运行时间都是点火 

316
00:12:47,460 --> 00:12:49,230
和涡轮风扇支持整个

317
00:12:49,230 --> 00:12:51,660
 这些之前的 JavaScript语言 

318
00:12:51,660 --> 00:12:53,520
技术被运送它不是

319
00:12:53,520 --> 00:12:54,960
 我们 可以优化所有的 情况下 

320
00:12:54,960 --> 00:12:58,350
 JavaScript 是我 的 方式 

321
00:12:58,350 --> 00:13:00,120
 让你们中的很多人都是你们中的一些人 

322
00:13:00,120 --> 00:13:02,070
知道的是，尝试赶上这样的例外 

323
00:13:02,070 --> 00:13:04,110
 结构化的异常处理 不是 

324
00:13:04,110 --> 00:13:07,470
 在 V的 旧 版本中进行了优化

325
00:13:07,470 --> 00:13:10,050
问题， 因为它仅限于 一个 

326
00:13:10,050 --> 00:13:11,940
 有选择地设置语言功能 

327
00:13:11,940 --> 00:13:13,320
 正在优化它的限制 

328
00:13:13,320 --> 00:13:14,880
你可以做一个开发商 和 

329
00:13:14,880 --> 00:13:17,310
你可以依靠什么来快速进入 

330
00:13:17,310 --> 00:13:20,730
你的应用程序现在变成涡轮风扇 

331
00:13:20,730 --> 00:13:22,470
点火优化了整个JavaScript 

332
00:13:22,470 --> 00:13:24,930
 他们提供的语言一致 

333
00:13:24,930 --> 00:13:28,380
性能我提到了一致

334
00:13:28,380 --> 00:13:30,420
基准性能作为一种a 

335
00:13:30,420 --> 00:13:32,490
 我们相信这两个咒语

336
00:13:32,490 --> 00:13:34,380
 我们已经解决了一些技术 

337
00:13:34,380 --> 00:13:36,090
 我们曾经习惯的有趣问题 

338
00:13:36,090 --> 00:13:39,480
有一个让我们给你软 

339
00:13:39,480 --> 00:13:41,910
关于基线的保证

340
00:13:41,910 --> 00:13:44,760
 你的代码的性能和我提到的 

341
00:13:44,760 --> 00:13:46,830
在我知道那个之前简单

342
00:13:46,830 --> 00:13:48,270
图片与信息流动 

343
00:13:48,270 --> 00:13:50,520
通过v8 看起来 像很多小 

344
00:13:50,520 --> 00:13:51,870
 盒子，但 它曾经是有的 

345
00:13:51,870 --> 00:13:53,730
 这些盒子之间的箭头是 

346
00:13:53,730 --> 00:13:55,590
有点不直观，很难

347
00:13:55,590 --> 00:13:57,750
 有关这个新系统的原因我们 

348
00:13:57,750 --> 00:13:59,490
能够创造的东西， 是 

349
00:13:59,490 --> 00:14:01,860
简单， 不是更全面

350
00:14:01,860 --> 00:14:04,830
编译器和我们的编译器

351
00:14:04,830 --> 00:14:07,680
收到现在这是一件 

352
00:14:07,680 --> 00:14:09,300
将在讨论中变得重要

353
00:14:09,300 --> 00:14:12,180
我们有后来的简单， 这是一个 

354
00:14:12,180 --> 00:14:13,890
 我会提到 的 技术要点 

355
00:14:13,890 --> 00:14:15,690
 最后是简单 可以是你的 

356
00:14:15,690 --> 00:14:19,470
朋友， 因为如果你投入太多 

357
00:14:19,470 --> 00:14:22,110
复杂性前沿， 那么复杂性 

358
00:14:22,110 --> 00:14:24,150
是你一次又一次付出的东西

359
00:14:24,150 --> 00:14:26,250
 并且如果你创建一个简单的系统 

360
00:14:26,250 --> 00:14:27,960
 一开始 就很容易 推理 

361
00:14:27,960 --> 00:14:30,240
关于衡量它很容易，很容易 

362
00:14:30,240 --> 00:14:33,990
 实际上确定问题并修复 

363
00:14:33,990 --> 00:14:37,620
错误与和不顾 一切就这么维持 

364
00:14:37,620 --> 00:14:39,000
 v8中正在进行的复杂的事情

365
00:14:39,000 --> 00:14:40,560
这是我们的设计目标 

366
00:14:40,560 --> 00:14:42,710
让事情尽可能的简单

367
00:14:42,710 --> 00:14:45,120
 必要的复杂性， 但只有 

368
00:14:45,120 --> 00:14:48,030
必要的复杂性， 因为更简单 

369
00:14:48,030 --> 00:14:50,850
系统只是简单的推理 

370
00:14:50,850 --> 00:14:54,720
更容易修复和建立一个 

371
00:14:54,720 --> 00:14:56,100
复杂的系统，它 变得越来越大 

372
00:14:56,100 --> 00:14:56,490
 大 

373
00:14:56,490 --> 00:14:58,200
 在某些时候没有那么简单

374
00:14:58,200 --> 00:14:59,640
 你 只是你 失去了你不能 

375
00:14:59,640 --> 00:15:04,130
 更长的举动我谈到反馈和 

376
00:15:04,130 --> 00:15:07,590
我们如何生成或如何优化代码 

377
00:15:07,590 --> 00:15:10,490
在第8版基于我们产生的反馈

378
00:15:10,490 --> 00:15:14,970
所以我想 进入 的 一 点点 

379
00:15:14,970 --> 00:15:17,670
 深入了解 这是如何完成的， 因为 

380
00:15:17,670 --> 00:15:19,740
我后来的例子理解这一点 

381
00:15:19,740 --> 00:15:22,170
事实证明， 我们使用这一点 很重要 

382
00:15:22,170 --> 00:15:24,810
机制调用内联缓存任何人 

383
00:15:24,810 --> 00:15:26,150
永远学习或 

384
00:15:26,150 --> 00:15:30,020
听说有一线 缓存哦， 好吧哇 

385
00:15:30,020 --> 00:15:32,420
 一个是就是这样的优秀 

386
00:15:32,420 --> 00:15:35,330
所以内联缓存， 所以这是我的好 

387
00:15:35,330 --> 00:15:37,190
 谈到 这个内联缓存是我们的 

388
00:15:37,190 --> 00:15:39,500
 我们 用来进行操作的 机制 

389
00:15:39,500 --> 00:15:42,950
在翻译和翻译都更快

390
00:15:42,950 --> 00:15:44,990
记录类型反馈或信息 

391
00:15:44,990 --> 00:15:48,050
 对于以后的 优化 是必要的 

392
00:15:48,050 --> 00:15:50,810
涡轮家庭，我想给你一个 

393
00:15:50,810 --> 00:15:53,510
 这 是 如何工作的例子， 所以这 是一个例子

394
00:15:53,510 --> 00:15:56,120
非常简单的功能 在这里 ， 要么 

395
00:15:56,120 --> 00:15:58,940
 返回数组或者第一个元素 

396
00:15:58,940 --> 00:16:00,800
未定义取决于 大小 

397
00:16:00,800 --> 00:16:02,570
 我认为这很 漂亮 

398
00:16:02,570 --> 00:16:05,780
直截了当的代码理解为 

399
00:16:05,780 --> 00:16:07,760
您将此代码发送到该管道 

400
00:16:07,760 --> 00:16:10,970
 我在第一次阐述之前概述了它 

401
00:16:10,970 --> 00:16:12,830
生成字节码，这是 什么 

402
00:16:12,830 --> 00:16:15,440
字节码看起来像是不会出汗的 

403
00:16:15,440 --> 00:16:18,290
字节代码的细节看起来非常类似 

404
00:16:18,290 --> 00:16:20,240
汇编语言历史的一种 

405
00:16:20,240 --> 00:16:23,540
是，我会进入 重要的 事情 

406
00:16:23,540 --> 00:16:26,870
 现在我们 在几分钟内 就可以 创建 

407
00:16:26,870 --> 00:16:29,420
我们也建立了这样的字节码

408
00:16:29,420 --> 00:16:32,120
 我们可以收集关于它的信息 

409
00:16:32,120 --> 00:16:33,650
它运行并且有这个 东西叫 

410
00:16:33,650 --> 00:16:36,500
 这是一种反馈向量 

411
00:16:36,500 --> 00:16:38,350
与字节码一起携手

412
00:16:38,350 --> 00:16:42,200
并让我有点想要你 

413
00:16:42,200 --> 00:16:46,580
 以显示 这三个部分是 怎样 的 

414
00:16:46,580 --> 00:16:48,890
适合在一起， 所以你会看到的 

415
00:16:48,890 --> 00:16:50,240
 我们在函数中做的第一件事是 问 

416
00:16:50,240 --> 00:16:52,250
 为数组的长度和from 

417
00:16:52,250 --> 00:16:55,730
 我们是从 那个声明来的 

418
00:16:55,730 --> 00:16:57,800
 在解释器中生成一个字节码 

419
00:16:57,800 --> 00:16:59,030
 这里也强调了这一点

420
00:16:59,030 --> 00:17:01,250
名称专有名称属性加载 

421
00:17:01,250 --> 00:17:04,040
具有命名属性的累加器不会 

422
00:17:04,040 --> 00:17:06,140
 再次为这里的细节出汗，但你 

423
00:17:06,140 --> 00:17:08,180
 注意到 在支架零在 

424
00:17:08,180 --> 00:17:10,339
 最后 实际上是指最后一个 

425
00:17:10,339 --> 00:17:12,470
到这个反馈向量中的一个索引

426
00:17:12,470 --> 00:17:15,080
这些突出了它的 高峰部分 

427
00:17:15,080 --> 00:17:16,520
 在这张幻灯片上的代码就是各种各样的 

428
00:17:16,520 --> 00:17:20,150
 像这样在这里如此 

429
00:17:20,150 --> 00:17:22,430
 平等运营商在这里证明 了这一点 

430
00:17:22,430 --> 00:17:24,500
 JavaScript， 所以我们实际上不知道 

431
00:17:24,500 --> 00:17:27,950
事先确切的细节如何

432
00:17:27,950 --> 00:17:29,480
 平等运营商 需要工作 

433
00:17:29,480 --> 00:17:31,130
 运行时间 取决于你的类型 

434
00:17:31,130 --> 00:17:32,600
发送它，所以我们必须收集反馈

435
00:17:32,600 --> 00:17:34,730
 在那也是如此 ， 因为我们有一个 

436
00:17:34,730 --> 00:17:36,170
 字节码，我们有一个插槽 

437
00:17:36,170 --> 00:17:37,430
反馈那个矢量来保存 

438
00:17:37,430 --> 00:17:39,750
 我们收集信息 

439
00:17:39,750 --> 00:17:43,480
所以我们最后一次手术是在 

440
00:17:43,480 --> 00:17:46,420
情况下， 我们加载 数组 不是 空的 

441
00:17:46,420 --> 00:17:47,620
第一个元素出来， 再次 

442
00:17:47,620 --> 00:17:50,770
这是一个指代插槽的字节码

443
00:17:50,770 --> 00:17:52,570
在反馈向量中，让我们一样 

444
00:17:52,570 --> 00:17:54,720
 执行它， 我们可以学习并 变得更好 

445
00:17:54,720 --> 00:18:00,190
 让感觉 好起来 ，让我们看看这是如何 

446
00:18:00,190 --> 00:18:03,190
 实际上 在执行的时候 让我们工作 

447
00:18:03,190 --> 00:18:07,000
调用我们刚刚在一个例程中的例程

448
00:18:07,000 --> 00:18:10,060
 整数值的光线和我们走 

449
00:18:10,060 --> 00:18:13,330
通过我会专注 于 这个 

450
00:18:13,330 --> 00:18:16,090
字节代码， 就像我们填写的那样 

451
00:18:16,090 --> 00:18:19,300
通过我们看看是什么 

452
00:18:19,300 --> 00:18:21,730
 实际上传递给解释 器 

453
00:18:21,730 --> 00:18:24,340
在这种情况下，当特定操作

454
00:18:24,340 --> 00:18:27,370
 你开始你要求的功能 

455
00:18:27,370 --> 00:18:29,230
长度的 数组，你 的 长度 

456
00:18:29,230 --> 00:18:32,260
 通过我们从那里得到那个财产 

457
00:18:32,260 --> 00:18:34,690
数组对象我们第一次看到 它 

458
00:18:34,690 --> 00:18:37,210
在V8里面，再次 不会 出汗 

459
00:18:37,210 --> 00:18:38,290
关于这些东西 是 什么细节

460
00:18:38,290 --> 00:18:38,650
叫

461
00:18:38,650 --> 00:18:42,760
我们记录嘿这是一个这是一个 

462
00:18:42,760 --> 00:18:45,940
 我们有一个内部整数数组

463
00:18:45,940 --> 00:18:48,520
我们在v8 中使用称为map的术语

464
00:18:48,520 --> 00:18:50,890
 样 的 幻想或没有那么花哨 字为 

465
00:18:50,890 --> 00:18:52,720
 类的描述符或类 

466
00:18:52,720 --> 00:18:54,160
 它的对象的形状描述符

467
00:18:54,160 --> 00:18:55,300
目前正在这样看待 

468
00:18:55,300 --> 00:18:56,830
情况下，我们正在寻找 的数组 

469
00:18:56,830 --> 00:18:59,320
 我们在第一个槽中记住的整数 

470
00:18:59,320 --> 00:19:01,600
 我们首先看到了一组整数 

471
00:19:01,600 --> 00:19:04,000
时间和为了做那个 操作 

472
00:19:04,000 --> 00:19:06,490
 在 整数 数组上 有一个 

473
00:19:06,490 --> 00:19:07,990
处理程序有一个它的代码指针

474
00:19:07,990 --> 00:19:09,370
基本上那会在记忆中被记住 

475
00:19:09,370 --> 00:19:11,770
 我们计算的反馈向量 

476
00:19:11,770 --> 00:19:14,520
第一次我们 第 一次看到这个 

477
00:19:14,520 --> 00:19:17,170
操作，我们将它们存储以输入 

478
00:19:17,170 --> 00:19:19,510
 弹出 后面的向量，以便 我们以后可以 

479
00:19:19,510 --> 00:19:21,610
 快速返回并执行它或更多 

480
00:19:21,610 --> 00:19:23,500
 第二次也快速再次 

481
00:19:23,500 --> 00:19:26,190
作为后期歌剧的占位符 

482
00:19:26,190 --> 00:19:29,920
与通过填写类型 

483
00:19:29,920 --> 00:19:31,960
填写我们知道的反馈向量 

484
00:19:31,960 --> 00:19:33,700
我们看到的什么类型可以用作 

485
00:19:33,700 --> 00:19:36,430
 其次提示优化编译器 

486
00:19:36,430 --> 00:19:42,040
 操作严格平等检查 

487
00:19:42,040 --> 00:19:44,650
长度在这里是一个整数值

488
00:19:44,650 --> 00:19:46,060
这是一个稍微不同的格式 

489
00:19:46,060 --> 00:19:48,070
插槽， 我们只 记得它是一个 

490
00:19:48,070 --> 00:19:51,280
整数，我们看到，最后当我们 

491
00:19:51,280 --> 00:19:53,110
 加载第一个元素 

492
00:19:53,110 --> 00:19:55,750
阵列的我们想起 相同或 

493
00:19:55,750 --> 00:19:57,100
我们记录了与我们相同的信息

494
00:19:57,100 --> 00:19:58,750
 当我们把握这个长度的时候我们做了 

495
00:19:58,750 --> 00:20:01,270
 它的地图和我们 的对象 的 形状 

496
00:20:01,270 --> 00:20:04,030
 创建处理程序或分配处理程序 

497
00:20:04,030 --> 00:20:05,590
到那个时隙和反馈向量 

498
00:20:05,590 --> 00:20:07,780
说这里的代码实际上 会 

499
00:20:07,780 --> 00:20:11,520
执行这种类型的操作 

500
00:20:11,520 --> 00:20:14,980
这是第一次 之后 的好地方

501
00:20:14,980 --> 00:20:17,860
 我们碰到的是这个代码是 什么 

502
00:20:17,860 --> 00:20:20,080
我们称之为单形如此单形手段 

503
00:20:20,080 --> 00:20:24,160
 我们为这些操作创建了一个形状 

504
00:20:24,160 --> 00:20:25,930
可以根据不同的事情做不同的事情

505
00:20:25,930 --> 00:20:29,170
 你传入的类型只能看到一个 

506
00:20:29,170 --> 00:20:31,630
类型，这对于v8来说是件好事 

507
00:20:31,630 --> 00:20:33,160
因为下一次围绕 在 

508
00:20:33,160 --> 00:20:35,230
我们运行它的解释器我们知道 是什么 

509
00:20:35,230 --> 00:20:36,460
我们看到之前我们可以 做一些 

510
00:20:36,460 --> 00:20:37,630
 关于它如何工作的假设

511
00:20:37,630 --> 00:20:39,550
 下一次假设它保持 

512
00:20:39,550 --> 00:20:41,830
 和 优化 编译器时一样 

513
00:20:41,830 --> 00:20:44,470
 当涡扇发动机可以使用时运行 

514
00:20:44,470 --> 00:20:46,150
 这些假设可以产生 

515
00:20:46,150 --> 00:20:49,900
更好的代码，所以这个工程很适合 

516
00:20:49,900 --> 00:20:52,800
 简单的代码变得 更加复杂 

517
00:20:52,800 --> 00:20:56,350
 当你开始介绍不同的 

518
00:20:56,350 --> 00:20:58,780
类型，所以我会再次打电话，但 

519
00:20:58,780 --> 00:21:00,610
 这次 用 一串字符串和 

520
00:21:00,610 --> 00:21:03,250
事实证明， V8的实施方式 

521
00:21:03,250 --> 00:21:06,430
该字符串数组看起来不同 

522
00:21:06,430 --> 00:21:08,890
 然后执行 

523
00:21:08,890 --> 00:21:10,810
 让我们来看看数组的数字 

524
00:21:10,810 --> 00:21:12,010
 我们执行时实际发生了什么

525
00:21:12,010 --> 00:21:14,320
 这个代码 是我们执行 的第一 件事 

526
00:21:14,320 --> 00:21:17,380
该数组长度的负载

527
00:21:17,380 --> 00:21:20,830
 因为它的形状不同于此 

528
00:21:20,830 --> 00:21:23,400
整数阵列的地图是不同的 

529
00:21:23,400 --> 00:21:26,140
 我们必须 记录下这个 事实和 这个 事实 

530
00:21:26,140 --> 00:21:29,050
我们这样做的方式不再适合 

531
00:21:29,050 --> 00:21:30,850
在我们必须的反馈向量中 

532
00:21:30,850 --> 00:21:34,630
 分配一个边数据结构和我们 

533
00:21:34,630 --> 00:21:36,730
把两个条目都放在那里

534
00:21:36,730 --> 00:21:38,590
 我们已经看到了正确的，所以我们已经看到了 

535
00:21:38,590 --> 00:21:40,750
 我们已经看到了一个整数的形状 

536
00:21:40,750 --> 00:21:43,420
数组，我们已经看到了一个 

537
00:21:43,420 --> 00:21:46,180
对象数组，所以这个 信息必须 

538
00:21:46,180 --> 00:21:49,570
被存储以供稍后快速执行和 

539
00:21:49,570 --> 00:21:51,610
解释器和优化，但你 

540
00:21:51,610 --> 00:21:52,570
看到它不会变得更多 

541
00:21:52,570 --> 00:21:54,100
 复杂的我们已经有了这个 

542
00:21:54,100 --> 00:21:55,390
线结构你可以看到的东西 是 

543
00:21:55,390 --> 00:21:56,200
 开始得到一 点点 

544
00:21:56,200 --> 00:21:59,740
复杂的好消息是当我们做 的时候 

545
00:21:59,740 --> 00:22:01,540
 平等运营商 

546
00:22:01,540 --> 00:22:03,610
它仍然是一个整数， 所以保持不变 

547
00:22:03,610 --> 00:22:06,460
同样，但当我们要求第一个 

548
00:22:06,460 --> 00:22:06,850
 元件 

549
00:22:06,850 --> 00:22:10,800
阵列的形状是 不同的 ，并且 

550
00:22:10,800 --> 00:22:13,990
 我们再次来 记录这个事实 ，所以如果 

551
00:22:13,990 --> 00:22:15,310
你看后面的反馈向量 

552
00:22:15,310 --> 00:22:17,020
 你做了 这两个 电话 您 的 

553
00:22:17,020 --> 00:22:19,690
 比你当 你不同的条目

554
00:22:19,690 --> 00:22:22,420
 因为我们已经 第一次跑完了 

555
00:22:22,420 --> 00:22:24,550
看到了造成的 不同类型 

556
00:22:24,550 --> 00:22:27,160
某些操作要走我们 所说的 

557
00:22:27,160 --> 00:22:31,270
多形态许多形状证明了这一点 

558
00:22:31,270 --> 00:22:33,310
 是困扰着我们的东西 

559
00:22:33,310 --> 00:22:35,860
多年来的多态操作和 

560
00:22:35,860 --> 00:22:38,460
我们在v8中处理多态 

561
00:22:38,460 --> 00:22:43,830
 直接转化为性能 如何 

562
00:22:43,830 --> 00:22:46,540
 如果我们真的很复杂的系统 

563
00:22:46,540 --> 00:22:49,510
处理多态复杂的系统 

564
00:22:49,510 --> 00:22:51,460
系统往往变得更好，更快 

565
00:22:51,460 --> 00:22:53,710
 这是我们摔跤的事情 

566
00:22:53,710 --> 00:22:55,840
 这对于一个例子来说很重要 

567
00:22:55,840 --> 00:23:01,120
 我想 现在 就给 你看看 

568
00:23:01,120 --> 00:23:03,880
 那种背景 知道如何v8 

569
00:23:03,880 --> 00:23:05,170
从根本上讲如何解释

570
00:23:05,170 --> 00:23:08,380
作品以及我们如何使用这些信息

571
00:23:08,380 --> 00:23:10,990
 从类型反馈收集 - 它会得到 

572
00:23:10,990 --> 00:23:13,090
 输入 到优化编译器中 

573
00:23:13,090 --> 00:23:15,070
多态性是你的东西

574
00:23:15,070 --> 00:23:16,300
 必须小心，因为它可以 

575
00:23:16,300 --> 00:23:19,420
实际上让你的代码更慢 

576
00:23:19,420 --> 00:23:22,870
变得敏锐或我们成了

577
00:23:22,870 --> 00:23:25,780
 在这个例子中非常了解这一点 

578
00:23:25,780 --> 00:23:28,750
 我想 告诉你现在 让我们来看看你 

579
00:23:28,750 --> 00:23:31,450
在你的程序中需要一个函数

580
00:23:31,450 --> 00:23:34,630
 它总结了所有的元素 

581
00:23:34,630 --> 00:23:36,580
 蛋白甜饼，所以这里是我的一个功能 

582
00:23:36,580 --> 00:23:39,340
通过手工书写使用某种惯用语 

583
00:23:39,340 --> 00:23:44,110
 是的， 它经历了所有 的 

584
00:23:44,110 --> 00:23:46,210
 第一个数组的 元素 

585
00:23:46,210 --> 00:23:47,590
它只是记住它，否则 

586
00:23:47,590 --> 00:23:50,290
它将它添加到它看到的元素或 

587
00:23:50,290 --> 00:23:53,080
 它所拥有的总和 已经收集起来了 

588
00:23:53,080 --> 00:23:58,570
到那一点是有道理的，我做的是 

589
00:23:58,570 --> 00:24:01,990
在这里也写了一个小时间例程

590
00:24:01,990 --> 00:24:05,980
你可以PAP 阵列 - 和它 

591
00:24:05,980 --> 00:24:08,680
包装和功能并运行它 

592
00:24:08,680 --> 00:24:10,950
 重新结束并获得一些 

593
00:24:10,950 --> 00:24:13,480
统计显着的表现 

594
00:24:13,480 --> 00:24:15,130
 结果并做出 判断 

595
00:24:15,130 --> 00:24:19,490
 快速的事情是 可以的， 以便让 

596
00:24:19,490 --> 00:24:20,570
 测试例程让我们看看它有多快 

597
00:24:20,570 --> 00:24:24,860
 是在v8，所以 手写一些 我 

598
00:24:24,860 --> 00:24:28,640
创建一个整数数组并运行 它 

599
00:24:28,640 --> 00:24:33,050
 通过我的基准线束和 100 

600
00:24:33,050 --> 00:24:34,550
毫秒运行它我认为是关于 

601
00:24:34,550 --> 00:24:36,880
一百万次 没关系，这很不错 

602
00:24:36,880 --> 00:24:41,120
 然后我 用 再次在 本次 运行 

603
00:24:41,120 --> 00:24:44,630
 所以可能是这样的 

604
00:24:44,630 --> 00:24:45,980
响起一些钟声，有什么东西

605
00:24:45,980 --> 00:24:48,880
会不一样的在这里正确的 

606
00:24:48,880 --> 00:24:54,080
 慢了很多，甚至慢得多 

607
00:24:54,080 --> 00:24:55,880
尽管阵列比较短，所以也是如此 

608
00:24:55,880 --> 00:24:58,250
 更少的工作要做，但它变慢了 

609
00:24:58,250 --> 00:25:01,250
 最后我发生了一些事情

610
00:25:01,250 --> 00:25:03,380
会用整数再次运行它 

611
00:25:03,380 --> 00:25:05,150
阵列中，我通过传递过去 

612
00:25:05,150 --> 00:25:10,220
第一次哎， 真的很慢 

613
00:25:10,220 --> 00:25:12,410
这个预期会让你想要你的 

614
00:25:12,410 --> 00:25:14,600
程序做到 这一点，这是不是 

615
00:25:14,600 --> 00:25:15,980
一致的基准性能我们 

616
00:25:15,980 --> 00:25:17,540
希望你能做些什么 

617
00:25:17,540 --> 00:25:19,850
一旦你再次做到这一点，你就会得到 

618
00:25:19,850 --> 00:25:23,090
同样的结果在正确性和中 

619
00:25:23,090 --> 00:25:25,550
在表现好，所以是什么 

620
00:25:25,550 --> 00:25:29,050
 去这里为什么这么慢 

621
00:25:29,050 --> 00:25:35,330
任何人猜测多态性和我们 

622
00:25:35,330 --> 00:25:38,000
谈到为什么这是怎样的 一个陷阱 

623
00:25:38,000 --> 00:25:40,550
 v8可能陷入你会注意到 

624
00:25:40,550 --> 00:25:44,510
在一些函数的迭代中 

625
00:25:44,510 --> 00:25:46,190
所做的事情就是取材

626
00:25:46,190 --> 00:25:48,590
 每个元素 和 我们使用这个 

627
00:25:48,590 --> 00:25:52,580
构建此为构建体 ，其 

628
00:25:52,580 --> 00:25:53,990
在封面下没有什么比 

629
00:25:53,990 --> 00:25:56,390
 那种 我之前做过的 工作 

630
00:25:56,390 --> 00:25:57,920
 在哪里看它的长度 

631
00:25:57,920 --> 00:26:00,650
数组并且需要当前元素 

632
00:26:00,650 --> 00:26:02,540
 它在它的 阵列之外 

633
00:26:02,540 --> 00:26:03,980
封面需要相同的机器 

634
00:26:03,980 --> 00:26:05,480
 我们在 我展示 的例子 中 看到的 

635
00:26:05,480 --> 00:26:08,559
 之前和它运行 它有相同的 

636
00:26:08,559 --> 00:26:10,640
危及如果你的隐患

637
00:26:10,640 --> 00:26:12,500
将它传递给 不同类型的数组 

638
00:26:12,500 --> 00:26:15,800
那么它会为这些生成多态性 

639
00:26:15,800 --> 00:26:18,440
 它甚至会获得更多一点 

640
00:26:18,440 --> 00:26:20,300
 在这个微妙的，因为 

641
00:26:20,300 --> 00:26:24,170
 当我们将这些元素加 在一起 的时候 

642
00:26:24,170 --> 00:26:28,340
运算符在JavaScript中加入 

643
00:26:28,340 --> 00:26:32,050
 戴着许多帽子 ，它可以是一个整数 

644
00:26:32,050 --> 00:26:33,150
 加成 

645
00:26:33,150 --> 00:26:35,400
在这种情况下你会得到整数加法 

646
00:26:35,400 --> 00:26:37,260
 或者它可以是字符串连接 

647
00:26:37,260 --> 00:26:39,480
 有点令人惊讶， 但它的作品 

648
00:26:39,480 --> 00:26:41,880
 所以 我们 第 一次运行总和 

649
00:26:41,880 --> 00:26:44,130
函数与整数数组我们得到一个

650
00:26:44,130 --> 00:26:47,100
整数结果 ， 加上是一个 

651
00:26:47,100 --> 00:26:49,070
整数操作虽然第二次

652
00:26:49,070 --> 00:26:51,480
 就像我们在什么时候看到一个多态 

653
00:26:51,480 --> 00:26:52,800
从数组中获取元素

654
00:26:52,800 --> 00:26:54,780
当我们添加元素 

655
00:26:54,780 --> 00:26:56,280
 首次将它们排列在一起

656
00:26:56,280 --> 00:26:58,680
整数秒他们是我们的字符串 

657
00:26:58,680 --> 00:27:00,750
必须有一个更复杂的

658
00:27:00,750 --> 00:27:03,059
实现它成为 它 的多态性 

659
00:27:03,059 --> 00:27:05,250
变得更慢， 所以这就是为什么 

660
00:27:05,250 --> 00:27:11,840
手写的实现是慢 没关系 

661
00:27:11,840 --> 00:27:14,010
也许VA团队可以做得更好 

662
00:27:14,010 --> 00:27:15,960
 对，我们有这些东西叫 

663
00:27:15,960 --> 00:27:18,510
 如果您了解JavaScript，则可以使用内置插件

664
00:27:18,510 --> 00:27:22,080
 相当不错，你知道那个 

665
00:27:22,080 --> 00:27:23,309
许多内置的原型

666
00:27:23,309 --> 00:27:24,630
对象有一大堆实用工具

667
00:27:24,630 --> 00:27:26,940
 Fink功能和那些功能都是 

668
00:27:26,940 --> 00:27:29,160
 在Ekman中非常详细地定义

669
00:27:29,160 --> 00:27:31,260
脚本规范，如果你阅读规范

670
00:27:31,260 --> 00:27:32,610
它说这正是 它正在发生的事情 

671
00:27:32,610 --> 00:27:35,010
 当你为每个或这个电话打电话时都要这么做 

672
00:27:35,010 --> 00:27:36,390
这正是我们要做的时 

673
00:27:36,390 --> 00:27:42,420
 你可以调用数组索引和好东西 

674
00:27:42,420 --> 00:27:44,010
 关于这件事是因为 我们有 

675
00:27:44,010 --> 00:27:45,630
 这个合约由集群定义 

676
00:27:45,630 --> 00:27:48,260
 您认为给予虚拟机的脚本 

677
00:27:48,260 --> 00:27:51,000
实施v8 工程师很多 

678
00:27:51,000 --> 00:27:53,250
有机会制作这些内置插件 

679
00:27:53,250 --> 00:27:55,710
因为它们随v8一起发布而更快

680
00:27:55,710 --> 00:27:57,240
我们可以做所有的伎俩 

681
00:27:57,240 --> 00:28:00,840
事先， 你可以通过 使用 获益 

682
00:28:00,840 --> 00:28:02,370
这些内置插件使用所有这些

683
00:28:02,370 --> 00:28:06,630
那我们把 那些正确的 确定，所以 

684
00:28:06,630 --> 00:28:09,300
事实证明这是一个内置的 

685
00:28:09,300 --> 00:28:12,960
 这 是 内置的减少 ，所以这 是 

686
00:28:12,960 --> 00:28:16,080
使用es6 语法我得到了一个小箭头 

687
00:28:16,080 --> 00:28:19,500
功能在这里我已经习惯了 

688
00:28:19,500 --> 00:28:21,179
 表达了我在试图做的事情 

689
00:28:21,179 --> 00:28:23,309
总和功能我有一个更高的水平 

690
00:28:23,309 --> 00:28:25,380
 通过使用reduce来表达我的意图

691
00:28:25,380 --> 00:28:28,800
 内置在阵列上并提供了 这个 

692
00:28:28,800 --> 00:28:30,360
箭头函数来告诉它你做了什么

693
00:28:30,360 --> 00:28:33,000
为每个元素做这样的总和 

694
00:28:33,000 --> 00:28:35,130
本质上功能确实是什么 

695
00:28:35,130 --> 00:28:36,840
手写代码的确有点不同 

696
00:28:36,840 --> 00:28:40,170
用语言结构包装我的意图

697
00:28:40,170 --> 00:28:42,900
 一个明确的语言陈述是 

698
00:28:42,900 --> 00:28:45,390
 语言的 这些内置插件 之一 

699
00:28:45,390 --> 00:28:46,919
 这很好地定义了它的行为 

700
00:28:46,919 --> 00:28:49,799
发现所以你认为这可能 是 哇 

701
00:28:49,799 --> 00:28:51,389
更快，这会更好

702
00:28:51,389 --> 00:28:52,859
 因为v8工程师已经保重了 

703
00:28:52,859 --> 00:28:56,129
 这个井如果你运行相同 

704
00:28:56,129 --> 00:28:57,419
 基准 ， 我 以前 

705
00:28:57,419 --> 00:29:02,720
直到铬58这里发生了什么

706
00:29:02,720 --> 00:29:08,450
整数数组，伤害 

707
00:29:08,450 --> 00:29:12,450
 凯瑟尔虽然运行它的结果 

708
00:29:12,450 --> 00:29:14,090
字符串

709
00:29:14,090 --> 00:29:16,200
 好的稍好，但仍然 没有 

710
00:29:16,200 --> 00:29:22,909
 很快，第三 次通过更快 

711
00:29:22,909 --> 00:29:27,419
 这里发生了什么好的，就是这样 

712
00:29:27,419 --> 00:29:29,460
几乎比做它慢五倍 

713
00:29:29,460 --> 00:29:31,190
 手工为什么你会 使用 内置的 

714
00:29:31,190 --> 00:29:33,389
我们拥有的所有专业知识

715
00:29:33,389 --> 00:29:35,730
似乎没有帮助 它 

716
00:29:35,730 --> 00:29:40,070
不幸的是为什么直到铬58 

717
00:29:40,070 --> 00:29:43,049
我们的许多内置插件和具体 

718
00:29:43,049 --> 00:29:44,970
这个减少的buildin就是我们 所说的 

719
00:29:44,970 --> 00:29:47,249
 自我 托管它是一种诱人的 

720
00:29:47,249 --> 00:29:50,489
 关于何时构建虚拟机的想法

721
00:29:50,489 --> 00:29:51,809
你知道我们要建造一个 

722
00:29:51,809 --> 00:29:52,830
编译器，我们将建立一个 

723
00:29:52,830 --> 00:29:54,840
 口译员，如果我们表达一切 

724
00:29:54,840 --> 00:29:57,659
就JavaScript而言无论它是什么 

725
00:29:57,659 --> 00:29:59,519
 那么在那个翻译和那些 

726
00:29:59,519 --> 00:30:01,470
那会优化编译器 

727
00:30:01,470 --> 00:30:02,970
只是照顾它 的权利也不会 

728
00:30:02,970 --> 00:30:04,559
我们的问题，因为编译器聪明 

729
00:30:04,559 --> 00:30:04,950
足够

730
00:30:04,950 --> 00:30:08,519
所以内置的减少写得像 

731
00:30:08,519 --> 00:30:08,759
 这个 

732
00:30:08,759 --> 00:30:11,940
直到铬58，你会看到它 

733
00:30:11,940 --> 00:30:13,409
比手写的要长得多

734
00:30:13,409 --> 00:30:15,029
版本的原因是因为 

735
00:30:15,029 --> 00:30:17,940
 ACMA脚本规范

736
00:30:17,940 --> 00:30:19,769
 内置 实际上很长并且具有 

737
00:30:19,769 --> 00:30:21,480
大量的边缘情况下 ， 很多 事情 

738
00:30:21,480 --> 00:30:22,919
 必须得到处理和表达 

739
00:30:22,919 --> 00:30:27,119
 作为JavaScript有一个阻抗 

740
00:30:27,119 --> 00:30:31,980
 反正不匹配， 无论 是那 

741
00:30:31,980 --> 00:30:33,539
 你还有一点点时间 

742
00:30:33,539 --> 00:30:35,730
基本上存在相同的问题

743
00:30:35,730 --> 00:30:37,980
多态现象可能在其中 

744
00:30:37,980 --> 00:30:39,869
这段代码是因为它是 JavaScript代码 

745
00:30:39,869 --> 00:30:43,830
 如果您使用自托管来表示 

746
00:30:43,830 --> 00:30:46,279
 排序 的这些非常常见的内置 

747
00:30:46,279 --> 00:30:48,809
 你运行相同的功能块

748
00:30:48,809 --> 00:30:51,629
 您会在内置插件中冒风险

749
00:30:51,629 --> 00:30:55,950
 得到 你的应用程序代码，所以是什么 

750
00:30:55,950 --> 00:30:58,950
观察不要药不 自己 

751
00:30:58,950 --> 00:31:00,390
 主机内置 

752
00:31:00,390 --> 00:31:03,120
优化他们为他们优化他们 和 

753
00:31:03,120 --> 00:31:05,460
这里的观察有点儿 

754
00:31:05,460 --> 00:31:07,740
 比更深 追溯到排序 

755
00:31:07,740 --> 00:31:10,289
 我 在 原来 的 观察 

756
00:31:10,289 --> 00:31:12,269
 这是介绍的开始

757
00:31:12,269 --> 00:31:15,740
如果某件事情对你来说 很重要 

758
00:31:15,740 --> 00:31:18,630
表现还是别的 不成熟 

759
00:31:18,630 --> 00:31:20,669
优化甚至排序 构建 一个 

760
00:31:20,669 --> 00:31:23,399
 心理模型 围绕 你的想法 

761
00:31:23,399 --> 00:31:25,559
您将稍后使用来优化 

762
00:31:25,559 --> 00:31:26,760
我们认为我们会有一个伟大的例子

763
00:31:26,760 --> 00:31:28,019
 编译器，我们会有一个伟大的 

764
00:31:28,019 --> 00:31:29,159
解释者只会解决这个问题 

765
00:31:29,159 --> 00:31:31,710
 对我们来说这个问题正在推动 

766
00:31:31,710 --> 00:31:33,029
技术债务是那种制作 

767
00:31:33,029 --> 00:31:34,919
 以后可能会出现的假设 

768
00:31:34,919 --> 00:31:37,100
 咬你，他们 在这种 情况下 做 

769
00:31:37,100 --> 00:31:39,480
所以另一种方式来看待 ，这是说 

770
00:31:39,480 --> 00:31:40,769
好吧，如果它真的很 重要 

771
00:31:40,769 --> 00:31:42,000
 性能为什么我们不建立一个 

772
00:31:42,000 --> 00:31:44,850
 解决方案，这是定制 

773
00:31:44,850 --> 00:31:51,000
对于我们的使用案例来说，这是轮到 

774
00:31:51,000 --> 00:31:54,120
 我们 在过去 几年中 做了什么

775
00:31:54,120 --> 00:31:55,529
 这是我想 和你谈谈的几年

776
00:31:55,529 --> 00:31:56,549
 我们如何做一点， 由于 

777
00:31:56,549 --> 00:31:57,990
我认为这是一种冷静 这是一个有点 

778
00:31:57,990 --> 00:32:01,019
位向你展示了我们是什么 

779
00:32:01,019 --> 00:32:02,519
实际上在v8 中做这些 

780
00:32:02,519 --> 00:32:06,690
你可能会问得更快

781
00:32:06,690 --> 00:32:09,990
因为内置插件是如此普遍使用 

782
00:32:09,990 --> 00:32:11,279
在许多不同的情况下，我们有 

783
00:32:11,279 --> 00:32:12,659
 关于他们的专业知识 

784
00:32:12,659 --> 00:32:14,220
因为我们是虚拟现实工程师，我们有 

785
00:32:14,220 --> 00:32:15,510
 这个规范 我们可以做到这一切 

786
00:32:15,510 --> 00:32:17,940
 如果我们事先工作会很好 

787
00:32:17,940 --> 00:32:20,639
 对什么是超级严格的控制

788
00:32:20,639 --> 00:32:22,679
 因为在内置中 生成 

789
00:32:22,679 --> 00:32:23,880
 JavaScript代码就是这样的 

790
00:32:23,880 --> 00:32:25,889
 我们做自我时的 抽象 

791
00:32:25,889 --> 00:32:27,299
 托管内置我们有点失落 

792
00:32:27,299 --> 00:32:28,409
 信息有一个 片段 

793
00:32:28,409 --> 00:32:31,559
阻抗不匹配我们失去 了一些 

794
00:32:31,559 --> 00:32:33,330
 像这样的帐篷的表现是 

795
00:32:33,330 --> 00:32:34,980
重要的是快速，也许使用一些 

796
00:32:34,980 --> 00:32:37,919
 这里的诡计你不能这样做 

797
00:32:37,919 --> 00:32:41,370
 JavaScript 自行托管内置if 

798
00:32:41,370 --> 00:32:43,320
有一种方法可以锻炼

799
00:32:43,320 --> 00:32:45,659
在一个更低的水平，将是 

800
00:32:45,659 --> 00:32:47,730
很好， 所以也许 JavaScript 不是 

801
00:32:47,730 --> 00:32:50,669
 正确的工具，我们如何使用 

802
00:32:50,669 --> 00:32:52,200
 C ++的权利，我们可以实现这些

803
00:32:52,200 --> 00:32:54,240
 事实证明，在C ++中嵌入内置 

804
00:32:54,240 --> 00:32:57,000
这是一种棘手 的一对夫妇 

805
00:32:57,000 --> 00:32:58,169
 我 无法做到的原因 

806
00:32:58,169 --> 00:33:01,529
第一个是我们之前的v8版本 

807
00:33:01,529 --> 00:33:03,990
执行JavaScript代码我们 

808
00:33:03,990 --> 00:33:06,360
有一个ABI我们有一个

809
00:33:06,360 --> 00:33:08,480
接口代码相互调用的方式

810
00:33:08,480 --> 00:33:11,850
 在 执行时 在Java内部 

811
00:33:11,850 --> 00:33:13,710
 那个JavaScript 

812
00:33:13,710 --> 00:33:17,940
不同于C ++ ABI，因为 

813
00:33:17,940 --> 00:33:19,529
他们不一样真的很难 

814
00:33:19,529 --> 00:33:21,960
没有一堆额外的互操作

815
00:33:21,960 --> 00:33:24,120
机器发现机器返回

816
00:33:24,120 --> 00:33:26,899
是不是很贵？ 

817
00:33:26,899 --> 00:33:30,899
性能的角度来看，它是真的 

818
00:33:30,899 --> 00:33:33,690
不是一个好主意，做， 在大多数 

819
00:33:33,690 --> 00:33:35,970
情况也是这样的 

820
00:33:35,970 --> 00:33:38,190
 所谓的延期代码， 如果我们有一个 

821
00:33:38,190 --> 00:33:40,549
 内置有快速 路径 

822
00:33:40,549 --> 00:33:44,580
 例如，如果你加入了它 

823
00:33:44,580 --> 00:33:46,440
 正在迭代一些事情 

824
00:33:46,440 --> 00:33:50,010
数组，你可以传入的情况下 

825
00:33:50,010 --> 00:33:51,570
 减少内置你可能已经通过它 

826
00:33:51,570 --> 00:33:53,909
这不是一个数组和圣诞节 

827
00:33:53,909 --> 00:33:55,710
 crip确切地定义了发生的事情 

828
00:33:55,710 --> 00:33:58,169
 那种情况， 但 如果是这样的话 

829
00:33:58,169 --> 00:34:00,299
我们知道我们可以做得非常 快 

830
00:34:00,299 --> 00:34:02,460
 我们 很快 就表达了 

831
00:34:02,460 --> 00:34:03,659
 这在我们的内置插件中我们有一个 

832
00:34:03,659 --> 00:34:06,000
快速路径我们运行一些检查 ，如果 

833
00:34:06,000 --> 00:34:08,310
这些检查持有 我们做快速普通 

834
00:34:08,310 --> 00:34:11,879
代码，否则我们去其他地方 做 

835
00:34:11,879 --> 00:34:14,159
一些更昂贵 ，然后 

836
00:34:14,159 --> 00:34:16,500
跳回来并恢复它的位置

837
00:34:16,500 --> 00:34:18,389
感觉好，所以 他们有内联 

838
00:34:18,389 --> 00:34:22,349
快速路径轮廓慢的路径很难做到 

839
00:34:22,349 --> 00:34:23,940
这在C ++中， 因为你实际上 

840
00:34:23,940 --> 00:34:26,429
 从字面上来说，希望快速路径是 

841
00:34:26,429 --> 00:34:28,470
 内联要控制 如何 

842
00:34:28,470 --> 00:34:30,929
 编译器生成的代码 很难做到 

843
00:34:30,929 --> 00:34:34,649
在C ++中，我们也有一个GC垃圾 

844
00:34:34,649 --> 00:34:38,460
收藏者在v8 和我们的事情之一 

845
00:34:38,460 --> 00:34:39,990
想要做的就是能够有指针 

846
00:34:39,990 --> 00:34:41,990
这不仅仅是你 知道的数据 

847
00:34:41,990 --> 00:34:44,280
 结构在 我们想要 的 c ++堆上 

848
00:34:44,280 --> 00:34:45,810
 有对 对象的指针和 

849
00:34:45,810 --> 00:34:49,080
因为我们GC GC实际上移动了 

850
00:34:49,080 --> 00:34:51,210
反对它压缩它 四处 移动它们 

851
00:34:51,210 --> 00:34:54,060
 为了提高效率 ，我们很重要 

852
00:34:54,060 --> 00:34:55,800
知道这些对象中的每一个在哪里

853
00:34:55,800 --> 00:34:58,290
指针是和专门处理它

854
00:34:58,290 --> 00:35:00,089
情况下有垃圾收集和 

855
00:35:00,089 --> 00:35:02,460
 在 C ++中 这样做 确实很困难 

856
00:35:02,460 --> 00:35:05,070
 这是哦， 这是非常困难 的 

857
00:35:05,070 --> 00:35:07,800
指定这里有一个指针，它是 

858
00:35:07,800 --> 00:35:09,180
将成为一个对象指针和不 

859
00:35:09,180 --> 00:35:10,560
不管发生什么事，你必须告诉我 

860
00:35:10,560 --> 00:35:12,000
当你用 这个指针 做任何事时 

861
00:35:12,000 --> 00:35:14,880
在编译器和C ++编译器中它 

862
00:35:14,880 --> 00:35:17,849
它只是不工作，你必须建立 

863
00:35:17,849 --> 00:35:19,020
真正的间接

864
00:35:19,020 --> 00:35:21,630
 昂贵的东西我们无法工作 

865
00:35:21,630 --> 00:35:24,240
做内置是我们做这些我们做尾巴 

866
00:35:24,240 --> 00:35:25,560
称它是这种 变体 的一种 

867
00:35:25,560 --> 00:35:27,630
延期代码将内联共同 

868
00:35:27,630 --> 00:35:29,579
案件后做一些检查，如果我们 

869
00:35:29,579 --> 00:35:30,779
根本无法处理它 

870
00:35:30,779 --> 00:35:35,160
 然后我们会从快速的尾巴中唤醒 

871
00:35:35,160 --> 00:35:37,470
实现到C ++实现中 

872
00:35:37,470 --> 00:35:39,900
 这有所有这些缺点，但我们 

873
00:35:39,900 --> 00:35:40,829
不关心，因为它几乎从不 

874
00:35:40,829 --> 00:35:42,240
 发生 我们只需要缓慢 

875
00:35:42,240 --> 00:35:44,839
实现符合规范 

876
00:35:44,839 --> 00:35:49,109
好吧，所以C ++不是正确的工具 

877
00:35:49,109 --> 00:35:50,220
 关于我们汇编所有内容 

878
00:35:50,220 --> 00:35:52,349
语言权利，这是他们所有的快速 

879
00:35:52,349 --> 00:35:55,680
 那控制结果一会儿我们 

880
00:35:55,680 --> 00:35:59,210
有点这样做，我们积累了 

881
00:35:59,210 --> 00:36:01,380
 每 行45,000行 汇编代码 

882
00:36:01,380 --> 00:36:03,799
 我们有 九个 平台 ， 

883
00:36:03,799 --> 00:36:06,000
如果你能想象它有点转身 

884
00:36:06,000 --> 00:36:07,589
 过了一段时间后变成了一团糟，因为它是 

885
00:36:07,589 --> 00:36:09,809
真的很难表达意图 

886
00:36:09,809 --> 00:36:12,240
在编写汇编语言时你可以

887
00:36:12,240 --> 00:36:16,769
只显示坚果和螺栓，然后转动

888
00:36:16,769 --> 00:36:18,569
 这也不是一个好 主意 

889
00:36:18,569 --> 00:36:21,599
所以有什么我们可以做的 

890
00:36:21,599 --> 00:36:23,670
让我们从 手写中获取想法

891
00:36:23,670 --> 00:36:26,789
平台内置了这些组件

892
00:36:26,789 --> 00:36:29,279
我们有他们真的很快， 但是 

893
00:36:29,279 --> 00:36:32,430
 不可能 维持有 

894
00:36:32,430 --> 00:36:34,829
 我们可以这样做 

895
00:36:34,829 --> 00:36:36,809
比这更好的它拥有 所有的 

896
00:36:36,809 --> 00:36:39,809
优点， 但也许不那么复杂 

897
00:36:39,809 --> 00:36:42,440
 我们可以更容易管理

898
00:36:42,440 --> 00:36:45,779
所以涡轮风扇我们有这个编译器

899
00:36:45,779 --> 00:36:47,460
 技术有 能力 

900
00:36:47,460 --> 00:36:49,500
 生成机器代码 优化的机器 

901
00:36:49,500 --> 00:36:53,549
代码在九个不同的平台 上 

902
00:36:53,549 --> 00:36:55,799
有这个中间表示

903
00:36:55,799 --> 00:36:58,440
代表着高运营

904
00:36:58,440 --> 00:37:00,750
级别添加这 两个32位数字的加载 

905
00:37:00,750 --> 00:37:02,880
 这个内存不足的值会使这个调用 

906
00:37:02,880 --> 00:37:05,519
到这个功能， 并通过 揭露 

907
00:37:05,519 --> 00:37:07,259
 我们可以以正确的方式接口

908
00:37:07,259 --> 00:37:09,750
 准确描述我们想要做什么 

909
00:37:09,750 --> 00:37:12,089
几乎是一个组装水平，但在中 

910
00:37:12,089 --> 00:37:15,720
 跨平台的方式等等界面 

911
00:37:15,720 --> 00:37:17,339
或者我们所称 的组件 

912
00:37:17,339 --> 00:37:19,470
代码存根汇编器就是

913
00:37:19,470 --> 00:37:22,230
 因为 我们称之为事物而非常困惑 

914
00:37:22,230 --> 00:37:24,029
有时候是存根，有时候是内置的

915
00:37:24,029 --> 00:37:27,029
 这是一个混乱，但无论如何，我们建立 

916
00:37:27,029 --> 00:37:28,710
内置的代码具有 

917
00:37:28,710 --> 00:37:32,250
汇编程序好，让我们来看看 

918
00:37:32,250 --> 00:37:35,490
检查每张纸是什么给了我们

919
00:37:35,490 --> 00:37:39,630
 GC支持证明了这一点 

920
00:37:39,630 --> 00:37:41,070
汇编语言真的很难，因为 

921
00:37:41,070 --> 00:37:42,360
你有同样的问题， 你 

922
00:37:42,360 --> 00:37:44,550
不会c ++以某种方式注释事物 

923
00:37:44,550 --> 00:37:46,500
明确这个东西在这个寄存器

924
00:37:46,500 --> 00:37:49,020
 在这个时候是一个对象哇，得到 

925
00:37:49,020 --> 00:37:50,880
真的难以维持 

926
00:37:50,880 --> 00:37:52,830
而你的代码停止汇编 

927
00:37:52,830 --> 00:37:55,080
创造价值并且你管理他们的一部分 

928
00:37:55,080 --> 00:37:56,760
 的界面可以让你 表达 

929
00:37:56,760 --> 00:37:58,500
 嘿这件事会成为 一个对象 和 

930
00:37:58,500 --> 00:37:59,880
这将是其整个生命周期中 只 

931
00:37:59,880 --> 00:38:01,320
 顺便为我做正确的事情

932
00:38:01,320 --> 00:38:04,380
把它放在一个注册表中， 如果你 可以的 话 

933
00:38:04,380 --> 00:38:06,800
正确的事情， 所以 你可以 免费 获得 

934
00:38:06,800 --> 00:38:09,300
寄存器分配的种类 

935
00:38:09,300 --> 00:38:11,040
提到提到 我的 一个 

936
00:38:11,040 --> 00:38:12,510
同事喜欢打电话给手写 

937
00:38:12,510 --> 00:38:14,250
 汇编 版本的寄存器分配 

938
00:38:14,250 --> 00:38:16,350
在大脑寄存器分配结果 

939
00:38:16,350 --> 00:38:18,000
 你做错了真的很难 

940
00:38:18,000 --> 00:38:19,980
所有的时间和它几乎创造 

941
00:38:19,980 --> 00:38:22,560
 因为 我们已经 不可能找到错误 

942
00:38:22,560 --> 00:38:24,270
一个优化编译器和turbofan如果 

943
00:38:24,270 --> 00:38:26,250
我们使用后端为那个 有一个 

944
00:38:26,250 --> 00:38:28,200
寄存器分配器，你不必

945
00:38:28,200 --> 00:38:30,900
 在这些问题 上 解决这些问题 

946
00:38:30,900 --> 00:38:33,420
 用 代码 子程序集编写存根 

947
00:38:33,420 --> 00:38:34,680
 因为寄存器分配已完成 

948
00:38:34,680 --> 00:38:37,050
 对你来说，它是通过机器完成的，而不是通过 

949
00:38:37,050 --> 00:38:41,760
脑所有这些阻抗

950
00:38:41,760 --> 00:38:44,609
 我与ABI提到的不匹配

951
00:38:44,609 --> 00:38:46,820
与之间来回呼叫

952
00:38:46,820 --> 00:38:49,380
 内置插件和JavaScript代码 

953
00:38:49,380 --> 00:38:52,650
 如果你用手写东西 的 话 ，它会变成asan 

954
00:38:52,650 --> 00:38:54,060
和汇编语言， 它是非常 

955
00:38:54,060 --> 00:38:56,730
难以维持很努力 在 做的 

956
00:38:56,730 --> 00:38:58,320
 CSA你基本上只是创建一个 

957
00:38:58,320 --> 00:39:00,359
描述符，然后说我想打电话 

958
00:39:00,359 --> 00:39:02,369
这个功能和 它有这个特殊之处 

959
00:39:02,369 --> 00:39:04,170
一组参数将这些寄存器放入 

960
00:39:04,170 --> 00:39:05,310
 从这些值或正确的地方 

961
00:39:05,310 --> 00:39:07,170
无论是做正确的事情还是事情 

962
00:39:07,170 --> 00:39:09,330
 为您生成九个代码 

963
00:39:09,330 --> 00:39:11,460
 平台， 当你 必须 这样做 

964
00:39:11,460 --> 00:39:13,170
 如果你 在汇编中 写下它们 ，请 亲自动手 

965
00:39:13,170 --> 00:39:15,690
 我们有一些非常整齐的语言

966
00:39:15,690 --> 00:39:18,119
 在所有的后端进行优化

967
00:39:18,119 --> 00:39:21,420
 我们的代码生成器 所以我们做指令 

968
00:39:21,420 --> 00:39:22,950
选择这意味着在英特尔平台上

969
00:39:22,950 --> 00:39:24,420
我们可以结合寻址模式

970
00:39:24,420 --> 00:39:26,670
让他们更有效率，我们有一个 

971
00:39:26,670 --> 00:39:28,410
指令调度器这是 一些东西 

972
00:39:28,410 --> 00:39:31,109
 这是真的很难 做手和 

973
00:39:31,109 --> 00:39:33,180
组装我们的指令调度程序

974
00:39:33,180 --> 00:39:35,340
 创建 的 简化模型 的模型 

975
00:39:35,340 --> 00:39:37,770
 的处理器，并计算出我是否 

976
00:39:37,770 --> 00:39:39,210
重新排列这些指令中的一部分 

977
00:39:39,210 --> 00:39:41,700
你会得到更快的代码大规模这样做

978
00:39:41,700 --> 00:39:45,080
在汇编语言中确实很难 

979
00:39:45,080 --> 00:39:47,310
最后一件事是工具集成 

980
00:39:47,310 --> 00:39:49,090
 事实证明 

981
00:39:49,090 --> 00:39:51,100
 作为 子汇编程序可以生成 的代码 

982
00:39:51,100 --> 00:39:53,470
 与之相关的正确记录 

983
00:39:53,470 --> 00:39:54,610
 它生成 的代码 让你 

984
00:39:54,610 --> 00:39:58,210
可以使用Linux perf集成 

985
00:39:58,210 --> 00:40:00,160
看看我们在哪里花时间

986
00:40:00,160 --> 00:40:01,450
这些内置插件， 如果你这样做 

987
00:40:01,450 --> 00:40:03,490
大会你将不得不建立 这些 

988
00:40:03,490 --> 00:40:04,750
手动记录完全无法维护

989
00:40:04,750 --> 00:40:06,910
 所以这是一件好事 

990
00:40:06,910 --> 00:40:08,230
编写一些我们现在可以生成的汇编程序 

991
00:40:08,230 --> 00:40:11,710
 我们 所有 平台的规模都是 这些 

992
00:40:11,710 --> 00:40:13,690
为自定义的内置插件

993
00:40:13,690 --> 00:40:16,420
 我们需要那么如何功能

994
00:40:16,420 --> 00:40:17,890
 这是怎么回事呢？ 

995
00:40:17,890 --> 00:40:21,670
在一天结束时结束，让我们来 

996
00:40:21,670 --> 00:40:23,110
 再次尝试整数数组 

997
00:40:23,110 --> 00:40:27,160
与镀铬63只有CSA 

998
00:40:27,160 --> 00:40:30,340
 的降低 建 于 权利，使 版本 

999
00:40:30,340 --> 00:40:33,430
它有一个定制版本的书面

1000
00:40:33,430 --> 00:40:35,290
生成漂亮的CSA界面

1001
00:40:35,290 --> 00:40:38,350
 所以 9个平台的汇编代码很好

1002
00:40:38,350 --> 00:40:41,290
 你第一次跑的很好 

1003
00:40:41,290 --> 00:40:43,600
 不好 ， 还有一些事情 要做 

1004
00:40:43,600 --> 00:40:47,410
在这里不，我不知道那里的那个C 

1005
00:40:47,410 --> 00:40:55,060
无论如何， 但来自弦乐 

1006
00:40:55,060 --> 00:40:57,850
如果我们的速度已经很快，那 很好 

1007
00:40:57,850 --> 00:41:00,460
为什么这可能是这种情况 

1008
00:41:00,460 --> 00:41:04,750
 那第二个呃是的，因为 C 

1009
00:41:04,750 --> 00:41:08,830
 这是正确的，所以我不 建议你 

1010
00:41:08,830 --> 00:41:14,310
随机将C代码添加到 Java脚本中 

1011
00:41:14,310 --> 00:41:16,570
那完全不是故意的，这 是 

1012
00:41:16,570 --> 00:41:22,380
反正没有好消息 的一致性 是 

1013
00:41:22,380 --> 00:41:24,730
当你运行整数数组时

1014
00:41:24,730 --> 00:41:27,430
它再次是一致的， 有一个 快乐的 

1015
00:41:27,430 --> 00:41:30,900
 结束 这个故事使我承担 

1016
00:41:30,900 --> 00:41:33,310
 我们可以做更多的 事情 

1017
00:41:33,310 --> 00:41:34,720
 虽然我们对这些仍然很慢 

1018
00:41:34,720 --> 00:41:38,140
整数数组的好处就是这样 

1019
00:41:38,140 --> 00:41:39,190
实际上这里有两件事 

1020
00:41:39,190 --> 00:41:40,330
请记住我给你看的例子 

1021
00:41:40,330 --> 00:41:43,750
最初与减少它称之为

1022
00:41:43,750 --> 00:41:46,150
箭头函数为我们的每个元素

1023
00:41:46,150 --> 00:41:48,430
 随着时间的推移，你可以想象得到 

1024
00:41:48,430 --> 00:41:53,050
 我们首先 调用reduce函数 

1025
00:41:53,050 --> 00:41:55,030
 我们花了一些时间在它做一些设置 

1026
00:41:55,030 --> 00:41:57,790
和一些检查，然后 

1027
00:41:57,790 --> 00:41:59,530
 它回调 的 回调函数 

1028
00:41:59,530 --> 00:42:01,510
做的工作增加了两个数字 ，它就这样了 

1029
00:42:01,510 --> 00:42:02,710
背部

1030
00:42:02,710 --> 00:42:04,450
它回到箭头功能添加 

1031
00:42:04,450 --> 00:42:06,760
两个数字可以回到mm-hmm 

1032
00:42:06,760 --> 00:42:08,710
对，所以你在这里得到的想法我不会 

1033
00:42:08,710 --> 00:42:10,810
 经历 这一切，但返回 并 

1034
00:42:10,810 --> 00:42:14,290
 这么多问题 是 怎么回事 

1035
00:42:14,290 --> 00:42:16,780
 问题 在于 回拨和 

1036
00:42:16,780 --> 00:42:18,850
之间的减少内置其中 

1037
00:42:18,850 --> 00:42:20,380
是真快，现在 

1038
00:42:20,380 --> 00:42:22,930
但是那个箭头函数有很多

1039
00:42:22,930 --> 00:42:26,740
 开销 ， 如果工作的 开销 

1040
00:42:26,740 --> 00:42:27,940
你正在做箭头内部

1041
00:42:27,940 --> 00:42:29,470
功能加运算非常 

1042
00:42:29,470 --> 00:42:33,310
 小呼叫来回 

1043
00:42:33,310 --> 00:42:35,440
实际上远远超过 了更贵

1044
00:42:35,440 --> 00:42:37,060
 实际上你在做的工作 

1045
00:42:37,060 --> 00:42:40,260
 回调内HMM 

1046
00:42:40,260 --> 00:42:43,180
那么我们如何很好地解决这个问题 

1047
00:42:43,180 --> 00:42:44,980
有这个优化编译器涡扇

1048
00:42:44,980 --> 00:42:46,840
 我们所做的是我们教过的 

1049
00:42:46,840 --> 00:42:50,170
涡轮风扇，当它看到一个呼叫

1050
00:42:50,170 --> 00:42:53,200
减少并知道该功能 

1051
00:42:53,200 --> 00:42:55,630
 这被称为 回到 满足 一定 

1052
00:42:55,630 --> 00:42:58,720
标准，它足够小，而且 

1053
00:42:58,720 --> 00:43:00,730
 月亮的相位是一致的，而且是相对的 

1054
00:43:00,730 --> 00:43:01,900
 每个月的第三个星期二 

1055
00:43:01,900 --> 00:43:06,850
它可以内联 运行 ，并 

1056
00:43:06,850 --> 00:43:09,490
当你发送你的代码时生成

1057
00:43:09,490 --> 00:43:11,530
到它生成的优化编译器 

1058
00:43:11,530 --> 00:43:15,340
一个代码的所有的减少 

1059
00:43:15,340 --> 00:43:17,650
包括呼叫的内联 版本 

1060
00:43:17,650 --> 00:43:19,750
 回到所以它看起来 更像这对好 

1061
00:43:19,750 --> 00:43:22,060
而不是调用 来回 

1062
00:43:22,060 --> 00:43:25,210
 有一个优化生成的块 

1063
00:43:25,210 --> 00:43:29,080
机器代码，这两个我都可以 

1064
00:43:29,080 --> 00:43:33,160
 可能是啊猜测其实哦，是的一个 

1065
00:43:33,160 --> 00:43:34,930
在这里添加的东西我们谈到了 

1066
00:43:34,930 --> 00:43:36,850
多态性是一件坏事证明 

1067
00:43:36,850 --> 00:43:37,960
 我们 可以玩一些技巧 

1068
00:43:37,960 --> 00:43:39,430
当我们得到时，优化apado 

1069
00:43:39,430 --> 00:43:40,990
 围绕优化我们可以有 

1070
00:43:40,990 --> 00:43:43,390
记录了 的方式在这个地方 

1071
00:43:43,390 --> 00:43:45,220
 你称之为减少它只有得到 

1072
00:43:45,220 --> 00:43:47,620
用整数数组调用它 

1073
00:43:47,620 --> 00:43:49,480
 记得在 代码 中的地方 

1074
00:43:49,480 --> 00:43:51,100
 如果你有 ， 请致电减少 

1075
00:43:51,100 --> 00:43:52,990
 你的代码的一部分，做字符串 

1076
00:43:52,990 --> 00:43:54,610
 减少操作和另一部分 

1077
00:43:54,610 --> 00:43:57,280
 你的代码 ，不会 的 ，你知道它有 

1078
00:43:57,280 --> 00:43:59,170
整数数组，它适用于这些 

1079
00:43:59,170 --> 00:44:00,490
两件事情将分开处理 

1080
00:44:00,490 --> 00:44:02,200
并且类型反馈将被分开 

1081
00:44:02,200 --> 00:44:04,930
 以这样的方式 ，我们可以专注和 

1082
00:44:04,930 --> 00:44:07,920
使它对这些呼叫站点是单形的 

1083
00:44:07,920 --> 00:44:12,790
 所有正确的 时间，所以让我们来做吧 

1084
00:44:12,790 --> 00:44:15,559
 让我们再次做基准 

1085
00:44:15,559 --> 00:44:21,759
这次是涡轮风扇 

1086
00:44:21,759 --> 00:44:26,390
很不错噢，那就是我 

1087
00:44:26,390 --> 00:44:29,420
谢谢，但无论如何， 让我们这样做的 

1088
00:44:29,420 --> 00:44:32,079
我们很好

1089
00:44:32,079 --> 00:44:34,369
有趣的是，在这里要注意的是 

1090
00:44:34,369 --> 00:44:37,059
实际上比整数数组快

1091
00:44:37,059 --> 00:44:39,109
 有意义的是它是一个更小的阵列 

1092
00:44:39,109 --> 00:44:43,099
它应该做更少的工作和运行 

1093
00:44:43,099 --> 00:44:49,430
 它再次不完美， 我 还是 相当不错的 

1094
00:44:49,430 --> 00:44:52,369
这是诚实的权利， 我还是更好 

1095
00:44:52,369 --> 00:44:54,170
 比之前我们看到的任何东西都要好 

1096
00:44:54,170 --> 00:44:55,910
看看这些数字 

1097
00:44:55,910 --> 00:44:58,160
比较第一个就是让我们开始 

1098
00:44:58,160 --> 00:45:00,229
 与自我托管的内置 

1099
00:45:00,229 --> 00:45:02,089
 我们会有铬58和 

1100
00:45:02,089 --> 00:45:05,719
在使用那个测试之前整数数组 

1101
00:45:05,719 --> 00:45:08,479
第一次是字符串数组第二次和 

1102
00:45:08,479 --> 00:45:10,219
 那么第三 次测试的第三次是 

1103
00:45:10,219 --> 00:45:12,049
整数数组作为第二次

1104
00:45:12,049 --> 00:45:14,869
 基准自我托管的 内置是一个 

1105
00:45:14,869 --> 00:45:17,059
所以任何事情都会比这更快 

1106
00:45:17,059 --> 00:45:19,849
越小越好越好 

1107
00:45:19,849 --> 00:45:21,289
你在这里注意到的第一件事是如果你 

1108
00:45:21,289 --> 00:45:23,779
有一个 手写版本，但你使用 

1109
00:45:23,779 --> 00:45:25,219
它就像 我们拥有 的图书馆 一样 

1110
00:45:25,219 --> 00:45:26,959
 该 手写总和功能，如果你使用 

1111
00:45:26,959 --> 00:45:28,729
它在一堆不同的 地方 然后 

1112
00:45:28,729 --> 00:45:31,069
如果你的单形是第一个，那很好

1113
00:45:31,069 --> 00:45:32,479
当你称它为超级时，它确实是

1114
00:45:32,479 --> 00:45:33,979
速度很快， 但 你会看到它逐渐地获得 

1115
00:45:33,979 --> 00:45:36,439
 随着 代码变得越来越复杂，情况越糟

1116
00:45:36,439 --> 00:45:39,199
这不是可预测的基准 

1117
00:45:39,199 --> 00:45:42,910
 CSA的表现没问题 

1118
00:45:42,910 --> 00:45:45,769
单态情况比较慢， 但是 

1119
00:45:45,769 --> 00:45:48,199
 如果你真的在复杂的代码中立即 

1120
00:45:48,199 --> 00:45:49,400
 处理 字符串或你正在处理 

1121
00:45:49,400 --> 00:45:51,559
 多态性已经更快了 

1122
00:45:51,559 --> 00:45:53,079
比自建的 内置和 

1123
00:45:53,079 --> 00:45:56,569
 如果 不比的 话可比 

1124
00:45:56,569 --> 00:45:58,489
 手写 版本 ，最后 

1125
00:45:58,489 --> 00:46:00,890
如果你使用涡轮风扇内嵌版本 

1126
00:46:00,890 --> 00:46:04,309
在Chrome 66或更高版本，你会看到， 

1127
00:46:04,309 --> 00:46:06,589
它比任何一个都快，速度更快 

1128
00:46:06,589 --> 00:46:08,269
比在手写版本 

1129
00:46:08,269 --> 00:46:10,849
单形的情况下，为什么这是一个

1130
00:46:10,849 --> 00:46:12,229
重要的是 这 还记得我告诉过你 

1131
00:46:12,229 --> 00:46:13,699
 我们有这个特殊的技术，因为 

1132
00:46:13,699 --> 00:46:15,259
 我们阅读规范和东西结果 

1133
00:46:15,259 --> 00:46:17,449
如果你看 一下 减少功能 

1134
00:46:17,449 --> 00:46:20,420
在规范中它留下了一些

1135
00:46:20,420 --> 00:46:22,099
 您 可能必须执行 的 步骤 

1136
00:46:22,099 --> 00:46:24,049
 实际上从技术上来说 是正确的 

1137
00:46:24,049 --> 00:46:26,449
 你使用你的 手写循环，所以我们 有 

1138
00:46:26,449 --> 00:46:28,670
 操作或优化的机会 

1139
00:46:28,670 --> 00:46:29,430
 你可能不会 

1140
00:46:29,430 --> 00:46:32,940
 手头上写的代码如此重要 

1141
00:46:32,940 --> 00:46:34,890
这里学到的教训表达意图 

1142
00:46:34,890 --> 00:46:36,300
理由是这些内置了这些 

1143
00:46:36,300 --> 00:46:38,579
更高阶的功能是有的

1144
00:46:38,579 --> 00:46:40,859
允许你说出你想要做什么 

1145
00:46:40,859 --> 00:46:43,319
高水平，让编译器 尝试 

1146
00:46:43,319 --> 00:46:45,900
 用你的意图优化它， 而不是 

1147
00:46:45,900 --> 00:46:46,859
 试图 找出你的意图 

1148
00:46:46,859 --> 00:46:49,260
就像我们在自己托管的那样

1149
00:46:49,260 --> 00:46:51,240
 从个人陈述中内置

1150
00:46:51,240 --> 00:46:55,940
这是一个非常 好的方面 

1151
00:46:55,940 --> 00:46:58,619
 减少 内置和许多其他的 

1152
00:46:58,619 --> 00:47:01,500
 实际上 在这 一点上 铬66或 

1153
00:47:01,500 --> 00:47:04,079
后来很低 - 这是一个很棒的图书馆 

1154
00:47:04,079 --> 00:47:05,520
很长一段时间 来获得 的唯一途径 

1155
00:47:05,520 --> 00:47:07,440
 对于一些真正不错的 表现 

1156
00:47:07,440 --> 00:47:09,930
数组内置， 如果你比较低 - 现在 

1157
00:47:09,930 --> 00:47:13,849
与最新版本的v8搭配使用 

1158
00:47:13,849 --> 00:47:15,930
 点火和涡轮风扇和这些 

1159
00:47:15,930 --> 00:47:18,359
 建筑物的 衬里 它的速度更快 

1160
00:47:18,359 --> 00:47:21,960
 使用 V8引擎的内置插件，而不是那种 

1161
00:47:21,960 --> 00:47:23,460
这些标准解决方案

1162
00:47:23,460 --> 00:47:26,069
 那好吧是好消息 

1163
00:47:26,069 --> 00:47:30,390
外卖的设计和最小

1164
00:47:30,390 --> 00:47:32,339
具体而言， 这是 我们学到的 一课 

1165
00:47:32,339 --> 00:47:35,099
非常困难的方式不要过度优化 

1166
00:47:35,099 --> 00:47:37,770
过早地优化或建立复杂性

1167
00:47:37,770 --> 00:47:39,770
 变成 你可能永远不需要的 东西 

1168
00:47:39,770 --> 00:47:43,230
正确的惯用JavaScript使用

1169
00:47:43,230 --> 00:47:45,540
 es6 和 提供的功能

1170
00:47:45,540 --> 00:47:48,089
 JavaScript 的新版本

1171
00:47:48,089 --> 00:47:50,490
 JavaScript语言，因为他们允许 

1172
00:47:50,490 --> 00:47:52,260
你高度表达你的意图 

1173
00:47:52,260 --> 00:47:54,390
 这给了我们更多的机会等级 

1174
00:47:54,390 --> 00:47:57,270
 优化你的代码选择正确的 

1175
00:47:57,270 --> 00:47:59,640
基准，因为这些基准将会 

1176
00:47:59,640 --> 00:48:00,960
 如果他们是这样的话，请绕过来缠住你 

1177
00:48:00,960 --> 00:48:03,990
错误的测量和仔细调整 

1178
00:48:03,990 --> 00:48:05,730
 花时间实际创建一个框架 

1179
00:48:05,730 --> 00:48:07,980
衡量你关心的事情

1180
00:48:07,980 --> 00:48:09,210
 关于这样 你就可以做到这一点 

1181
00:48:09,210 --> 00:48:10,890
迭代并 在事物上 获得更好 的结果 

1182
00:48:10,890 --> 00:48:14,160
你关心的就是这个， 非常感谢你

1183
00:48:14,160 --> 00:48:16,400
 许多 

